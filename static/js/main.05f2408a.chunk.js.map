{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["latest_packages","dashing_packages","eloquent_packages","foxy_packages","ros_distro_to_ubuntu_distro","RepoLink","name","href","ActionLink","repo","split","src","alt","CodecovLink","IssuesLink","PRsLink","DevelopmentStatusTable","Table","striped","bordered","hover","Object","keys","map","p","key","Ros2BuildIcon","distro","pkg","build_type","initial","toUpperCase","ubuntu_distro","ubuntu_initial","short_tag","long_tag","build_url","DistroReleaseTable","packages","App","Navbar","bg","expand","Brand","Container","Row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05f2408a.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Table from 'react-bootstrap/Table';\n\nconst latest_packages = {\n  \"ros-tooling/action-amazon-chime\": {},\n  \"ros-tooling/action-cloudwatch-metrics\": {},\n  \"ros-tooling/action-pypi\": {},\n  \"ros-tooling/action-repository-activity\": {},\n  \"ros-tooling/action-ros-ci\": {},\n  \"ros-tooling/action-ros-ci-template\": {},\n  \"ros-tooling/action-ros-lint\": {},\n  \"ros-tooling/cross_compile\": {},\n  \"ros-tooling/github-contribution-report-generator\": {},\n  \"ros-tooling/launch_ros_sandbox\": {},\n  \"ros-tooling/libstatistics_collector\": {},\n  \"ros-tooling/setup-ros\": {},\n  \"ros-tooling/setup-ros-docker\": {},\n  \"ros-tooling/system_metrics_collector\": {},\n  \"ros2/rosbag2\": {},\n  \"ros2/rosbag2_bag_v2\": {},\n};\n\nconst dashing_packages = [\"cross_compile\", \"rosbag2\", \"rosbag2_bag_v2_plugins\"];\nconst eloquent_packages = [\"cross_compile\", \"rosbag2\", \"rosbag2_bag_v2_plugins\"];\nconst foxy_packages = [\"libstatistics_collector\", \"rosbag2\", \"rosbag2_bag_v2_plugins\", \"system_metrics_collector\"];\n\nconst ros_distro_to_ubuntu_distro = {\n  \"dashing\": \"bionic\",\n  \"eloquent\": \"bionic\",\n  \"foxy\": \"focal\",\n};\n\nfunction RepoLink({ name }) {\n  return (\n    <a href={`https://github.com/${name}`}>{name}</a>\n  );\n}\n\nfunction ActionLink({name}) {\n  const repo = name.split('/')[1];\n  return (\n    <a href={`https://github.com/${name}/actions`}>\n      <img src={`https://github.com/${name}/workflows/Test%20${repo}/badge.svg`} alt=\"test status badge\" />\n    </a>\n  );\n}\n\nfunction CodecovLink({ name }) {\n  return (\n    <a href={`https://codecov.io/gh/${name}`}>\n      <img src={`https://codecov.io/gh/${name}/branch/master/graph/badge.svg`} alt=\"codecov badge\" />\n    </a>\n  );\n}\n\nfunction IssuesLink({ name }) {\n  return (\n    <a href={`https://github.com/${name}/issues`}>\n      <img src={`https://img.shields.io/github/issues/${name}`} alt=\"issue count badge\" />\n    </a>\n  );\n}\n\nfunction PRsLink({ name }) {\n  return (\n    <a href={`https://github.com/${name}/issues`}>\n      <img src={`https://img.shields.io/github/issues-pr/${name}`} alt=\"PR count badge\" />\n    </a>\n  );\n}\n\nfunction DevelopmentStatusTable() {\n  return (\n    <Table striped bordered hover>\n    <thead>\n      <tr>\n        <th>Repository</th>\n        <th>Latest</th>\n        <th>Nightly</th>\n        <th>Coverage</th>\n        <th>Issues</th>\n        <th>PRs</th>\n      </tr>\n    </thead>\n    <tbody>\n      {\n        Object.keys(latest_packages).map(p =>\n          <tr key={p}>\n            <td><RepoLink name={p} /></td>\n            <td><ActionLink name={p} /></td>\n            <td>N/A</td>\n            <td><CodecovLink name={p} /></td>\n            <td><IssuesLink name={p} /></td>\n            <td><PRsLink name={p} /></td>\n          </tr>\n        )\n      }\n      </tbody>\n    </Table>\n  );\n}\n\nfunction Ros2BuildIcon({ distro, pkg, build_type }) {\n  // For reference\n  // Ddev\n  // Dsrc_uB\n  // Dbin_uB64\n  // Dbin_ubv8_uBv8\n  // Dbin_ubhf_uBhf\n  // Fbin_ubv8_uFv8\n  const initial = distro[0].toUpperCase();\n  const ubuntu_distro = ros_distro_to_ubuntu_distro[distro];\n  const ubuntu_initial = ubuntu_distro[0].toUpperCase();\n  let short_tag = ``;\n  let long_tag = ``;\n  switch (build_type) {\n    case \"dev\":\n      short_tag = `${initial}dev`;\n      long_tag = `ubuntu_${ubuntu_distro}_amd64`;\n      break;\n    case \"src\":\n      short_tag = `${initial}src_u${ubuntu_initial}`;\n      long_tag = `ubuntu_${ubuntu_distro}__source`;\n      break;\n    case \"x86_64\":\n      short_tag = `${initial}bin_u${ubuntu_initial}64`;\n      long_tag = `ubuntu_${ubuntu_distro}_amd64__binary`;\n      break;\n    case \"aarch64\":\n      short_tag = `${initial}bin_ubv8_u${ubuntu_initial}v8`;\n      long_tag = `ubuntu_${ubuntu_distro}_arm64__binary`;\n      break;\n    case \"armhf\":\n      short_tag = `${initial}bin_ubhf_u${ubuntu_initial}hf`;\n      long_tag = `ubuntu_${ubuntu_distro}_armhf__binary`;\n      break;\n    default:\n      break;\n  }\n\n  const build_url = `http://build.ros2.org/view/${short_tag}/job/${short_tag}__${pkg}__${long_tag}`;\n  return (\n    <a href={build_url}>\n      <img src={`${build_url}/badge/icon`} alt=\"build.ros2.org badge\" />\n    </a>\n  )\n}\n\nfunction DistroReleaseTable({ distro, packages }) {\n  return (\n    <Table striped bordered hover>\n      <thead>\n        <tr>\n          <th>Package</th>\n          <th>dev</th>\n          <th>src</th>\n          <th>x86_64</th>\n          <th>aarch64</th>\n          <th>armhf</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n        packages.map(p =>\n          <tr key={p}>\n            <td>{p}</td>\n            <td><Ros2BuildIcon distro={distro} pkg={p} build_type=\"dev\" /></td>\n            <td><Ros2BuildIcon distro={distro} pkg={p} build_type=\"src\" /></td>\n            <td><Ros2BuildIcon distro={distro} pkg={p} build_type=\"x86_64\" /></td>\n            <td><Ros2BuildIcon distro={distro} pkg={p} build_type=\"aarch64\" /></td>\n            <td><Ros2BuildIcon distro={distro} pkg={p} build_type=\"armhf\" /></td>\n          </tr>\n        )\n      }\n      </tbody>\n    </Table>\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>ROS 2 Tooling Working Group Dashboard</Navbar.Brand>\n      </Navbar>\n      <Container>\n        <Row>\n          <h1>Projects Development Status</h1>\n          <DevelopmentStatusTable />\n        </Row>\n        <Row>\n          <h1> Released Packages - Foxy Fitzroy</h1>\n          <DistroReleaseTable distro=\"foxy\" packages={foxy_packages} />\n        </Row>\n        <Row>\n          <h1>Released Packages - Eloquent Elusor</h1>\n          <DistroReleaseTable distro=\"eloquent\" packages={eloquent_packages} />\n        </Row>\n        <Row>\n          <h1>Released Packages - Dashing Diademata</h1>\n          <DistroReleaseTable distro=\"dashing\" packages={dashing_packages} />\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}